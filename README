EN.600.344
Computer Network Fundamentals
Project 3 - PWOSPF
Group 1
      Dan Crankshaw
      Maddie Stone
      Adam Gross


*Note: for some reason, on our machines, the ip version number and the ip header length
were in the wrong bit order in the ip header struct (contained in sr_protocol.h). To fix this,
we switched it so that each is in the reverse order that the stub code had them.

LSU's:
    The Link State Updates are sent every OSPF_DEFAULT_LSUINT seconds. The LSU includes 
    advertisements for each of its subnets' that are known to have a neighbor router connected,
    as well as all of the static routes.
HELLO's: 
    Hello packets are sent every OSPF_DEFAULT_HELLOINT seconds. 
    
The topology is given TOP_INITIALIZATION (in sr_pwospf.h) seconds to initialize before any subnets 
are deleted. After TOP_INITIALIZATION seconds, subnets and adjacencies are deleted based on 
the absence of advertisements are HELLO packets.

When a MAC address is needed for a packet and not in the ARP cache, get_mac_address is called. 
This creates an arpq entry that is added to sr->pending if it doesn't already exist. This entry 
contains the associated IP address, the constructed ARP request, a buffer for non-LSU packets, and 
a buffer for just LSU packets. When ARP requests need to be sent, a new thread is started for
each IP address that we're looking for a MAC for. Every 5 seconds, if the entry is not in the cache,
another ARP is sent. If the entry is in the cache, all of the packets in both buffers are sent, 
the thread is terminated, and the num requests is resent. If 5 requests are sent with no reply 
received, a ICMP Host Unreachable is sent for all packets in the packet buffer and the LSU's 
in the LSU buffer are all dropped. The thread is then terminated.

Data Structures:
	-Topology: This implementation stores the topology as a linked list of routers.
		Each router has its own adjacency list (containing pointers to the other routers),
		as well as a matching list of subnets, which includes each router, as well as any
		application servers (or non routers) that this router is connected to. This adjacency
		list of routers is used in a computation of Dijkstra's algorithm to find the shortest
		path from the host router to each subnet in the topology. These shortest paths are then
		added to the dynamic forwarding table.
	-Interface list: The pwospf subsystem has its own interface list, creating using
		information from the interface list in the instance struct (struct sr_instance *sr),
		as well as additional information including an array of neighbors. These neighbors contain
		an entry for each neighbor sending the router hello packets. The list allows for arbitrarily
		many neighbors for any given interface.
	
	-We used unordered linked lists and arrays to build our data structures. We decided that
		because any individual list was relatively small (less than 10 elements), the overhead
		and added complexity of creating and maintaining ordered lists outweighed any benefits of
		added efficiency (i.e. when searching the lists).
		
PWOSPF subsystem:
	-The pwospf subsystem runs using a separate thread. This thread solely decides when to
		send packets (LSU's every 30 seconds, and hello packets every 5 seconds, although
		these are #define and can be easily changed), and sleeps to get the timing right.
		This thread accesses some global resources that the handle_packet thread accesses
		as well, and so we use mutexes to protect and serialize access to these shared resources.
